import moment from 'moment';
import React, { useCallback, useMemo, useRef, useState } from 'react';
import { useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import RTEditor, { EditorValue } from 'react-rte';
import DatePicker from 'react-datepicker';
import KeyboardBackspaceIcon from '@mui/icons-material/KeyboardBackspace';
import CameraAltOutlinedIcon from '@mui/icons-material/CameraAltOutlined';
import CancelIcon from '@mui/icons-material/Cancel';
import RichTextEditor from './RichTextEditor';
import MultiSelectCheckboxes from '../../../common/components/MultiSelectCheckboxes/MultiSelectCheckboxes';
import { ListCheckboxesGroupType, SelectedValuesType } from '../../../common/components/MultiSelectCheckboxes/types';
import { IAppState } from '../../../../redux/reducer';
import { formatDateToYYYYMMDD, formatTimeStampToYYYYMMDD } from '../../utils/functions';
import { ROUTES } from '../../../../configs/routes';
import { priceRegex } from '../../../../utils';
import { IVendor } from '../../../../models/vendor';
import {
  ICreateProductParams,
  ICreateProductValidation,
  IProductDetail,
  IUpdateProductParams,
} from '../../../../models/product';
import {
  PRODUCT_CONDITION,
  PRODUCT_MEMBERSHIPS,
  PRODUCT_META_DESCRIPTION_TYPE,
  PRODUCT_META_DESCRIPTION_TYPE_AUTOGENERATED_ID,
  PRODUCT_META_DESCRIPTION_TYPE_CUSTOM_ID,
  PRODUCT_OPEN_GRAPH_TAGS_TYPE,
  PRODUCT_OPEN_GRAPH_TAGS_TYPE_AUTOGENERATED_ID,
  PRODUCT_OPEN_GRAPH_TAGS_TYPE_CUSTOM_ID,
  PRODUCT_SALE_PRICE_TYPE,
  PRODUCT_SALE_PRICE_TYPE_DOLLAR_ID,
  PRODUCT_SHIPPING_TO_ZONE_CONTINENTAL_US_ID,
} from '../utils/constants';
import {
  validateCreateProduct,
  validateProductBrand,
  validateProductCategories,
  validateProductCondition,
  validateProductDescription,
  validateProductImages,
  validateProductName,
  validateProductPrice,
  validateProductQuantity,
  validateProductSalePrice,
  validateProductShippingToZonePrice,
  validateProductVendor,
} from '../utils/functions';

interface CreateProductProps extends Props {
  isUpdateProduct: false;
  onCreateProduct: (values: ICreateProductParams) => void;
}

interface UpdateProductProps extends Props {
  isUpdateProduct: true;
  productDetail: IProductDetail;
  onUpdateProduct: (values: IUpdateProductParams) => void;
}

interface Props {
  isUpdateProduct: boolean;
}

const ProductDetail = ({ isUpdateProduct, ...props }: CreateProductProps | UpdateProductProps) => {
  const { productDetail: productDetailFromServer, onUpdateProduct } = props as UpdateProductProps;
  const { onCreateProduct } = props as CreateProductProps;

  const {
    vendors: { vendors },
    brands: { brands },
    categories: { categories },
    shippings: { shippings },
  } = useSelector((state: IAppState) => state);

  const [imageFiles, setImageFiles] = useState<ICreateProductParams['images']>([]);
  const [listVendor, setListVendor] = useState<Array<IVendor>>([]);
  const [vendorText, setVendorText] = useState<string>(
    vendors?.find((vendor) => vendor?.id === productDetailFromServer?.vendor_id)?.name || '',
  );

  const [productDetail, setProductDetail] = useState<ICreateProductParams['productDetail']>({
    vendor_id: productDetailFromServer?.vendor_id || '',
    name: productDetailFromServer?.name || '',
    brand_id: productDetailFromServer?.brand_id || '',
    condition_id: productDetailFromServer?.condition_id || '',
    categories: productDetailFromServer?.categories.map((category) => +category.category_id) || [],
    description: productDetailFromServer?.description || '',
    enabled: productDetailFromServer?.enabled ? +productDetailFromServer.enabled : 0,
    memberships: productDetailFromServer?.memberships?.map((membership) => +membership.membership_id) || [],
    shipping_to_zones: productDetailFromServer?.shipping?.map((shippingZone) => ({
      id: Number(shippingZone.id), //Server trả string
      price: shippingZone.price,
    })) || [{ id: PRODUCT_SHIPPING_TO_ZONE_CONTINENTAL_US_ID, price: '' }], //Continental US
    tax_exempt: productDetailFromServer?.tax_exempt ? +productDetailFromServer.tax_exempt : 0,
    price: productDetailFromServer?.price || '',
    sale_price_type: productDetailFromServer?.sale_price_type || PRODUCT_SALE_PRICE_TYPE_DOLLAR_ID,
    arrival_date: productDetailFromServer?.arrival_date
      ? formatTimeStampToYYYYMMDD(+productDetailFromServer.arrival_date)
      : formatDateToYYYYMMDD(new Date()),
    inventory_tracking: productDetailFromServer?.inventory_tracking ? +productDetailFromServer.inventory_tracking : 0,
    quantity: productDetailFromServer?.quantity || '',
    sku: productDetailFromServer?.sku || '',
    participate_sale: productDetailFromServer?.participate_sale ? +productDetailFromServer.participate_sale : 0,
    sale_price: productDetailFromServer?.sale_price || '',
    og_tags_type: productDetailFromServer?.og_tags_type || '',
    og_tags: productDetailFromServer?.og_tags || '',
    meta_desc_type: productDetailFromServer?.meta_desc_type || '',
    meta_description: productDetailFromServer?.meta_description || '',
    meta_keywords: productDetailFromServer?.meta_keywords || '',
    product_page_title: productDetailFromServer?.product_page_title || '',
    facebook_marketing_enabled: productDetailFromServer?.facebook_marketing_enabled
      ? +productDetailFromServer.facebook_marketing_enabled
      : 0,
    google_feed_enabled: productDetailFromServer?.google_feed_enabled
      ? +productDetailFromServer.google_feed_enabled
      : 0,
    imagesOrder: productDetailFromServer?.images?.map((image) => image.file) || [],
    deleted_images: [],
  });

  const [descriptionRichTextValue, setDescriptionRichTextValue] = useState(
    RTEditor.createValueFromString(productDetail.description, 'html'),
  );
  const [previewImages, setPreviewImages] = useState<Array<string>>([...productDetail.imagesOrder]);
  const [startDate, setStartDate] = useState<Date | null>(moment(productDetail.arrival_date).toDate());

  //Nếu là update thì k phải validate lượt đầu
  const [validate, setValidate] = useState<ICreateProductValidation>({
    vendor: productDetailFromServer ? '' : null,
    name: productDetailFromServer ? '' : null,
    brand_id: productDetailFromServer ? '' : null,
    condition_id: productDetailFromServer ? '' : null,
    images: productDetailFromServer ? '' : null,
    categories: productDetailFromServer ? '' : null,
    description: productDetailFromServer ? '' : null,
    price: productDetailFromServer ? '' : null,
    sale_price: productDetailFromServer ? '' : null,
    quantity: productDetailFromServer ? '' : null,
    shipping_to_zones: productDetailFromServer ? '' : null,
  });

  const shippingLocationSelectRef = useRef<HTMLSelectElement>(null);

  const listCategoryCheckboxes = useMemo((): ListCheckboxesGroupType => {
    const list: ListCheckboxesGroupType = [];

    if (categories) {
      list.push({
        checkboxes: categories.map((category) => ({
          text: category.name,
          value: category.id,
          select: productDetail.categories.some((detailCategory) => detailCategory === +category.id),
        })),
      });
    }

    return list;
  }, [categories, productDetail.categories]);

  const listMembershipCheckboxes = useMemo((): ListCheckboxesGroupType => {
    const list: ListCheckboxesGroupType = [];

    list.push({
      checkboxes: PRODUCT_MEMBERSHIPS.map((membership) => ({
        text: membership.name,
        value: membership.id,
        select: productDetail.memberships.some((detailMembership) => detailMembership === +membership.id),
      })),
    });

    return list;
  }, [productDetail.memberships]);

  const isValidCreateProduct = useMemo(() => validateCreateProduct(validate), [validate]);

  const renderBrands = useCallback((): Array<JSX.Element> => {
    const options: Array<JSX.Element> = [];

    brands?.map((brand) =>
      options.push(
        <option key={brand.id} value={brand.id || ''}>
          {brand.name}
        </option>,
      ),
    );

    return options;
  }, [brands]);

  const renderConditions = useCallback((): Array<JSX.Element> => {
    const options: Array<JSX.Element> = [];

    PRODUCT_CONDITION.map((condition) => {
      options.push(
        <option key={condition.id} value={condition.id}>
          {condition.name}
        </option>,
      );
    });

    return options;
  }, []);

  const renderSalePriceType = useCallback((): Array<JSX.Element> => {
    const options: Array<JSX.Element> = [];

    PRODUCT_SALE_PRICE_TYPE.map((type) => {
      options.push(
        <option key={type.id} value={type.id}>
          {type.name}
        </option>,
      );
    });

    return options;
  }, []);

  const renderShippings = useCallback((): Array<JSX.Element> => {
    const options: Array<JSX.Element> = [];

    shippings?.map((shipping) => {
      if (!productDetail.shipping_to_zones.some((shippingToZone) => `${shippingToZone.id}` === shipping.id)) {
        options.push(
          <option key={shipping.id} value={shipping.id || ''}>
            {shipping.name}
          </option>,
        );
      }
    });

    return options;
  }, [shippings, productDetail.shipping_to_zones]);

  const renderOpenGraphTagsType = useCallback((): Array<JSX.Element> => {
    const options: Array<JSX.Element> = [];

    PRODUCT_OPEN_GRAPH_TAGS_TYPE.map((type) => {
      options.push(
        <option key={type.id} value={type.id}>
          {type.name}
        </option>,
      );
    });

    return options;
  }, []);

  const renderMetaDescriptionType = useCallback((): Array<JSX.Element> => {
    const options: Array<JSX.Element> = [];

    PRODUCT_META_DESCRIPTION_TYPE.map((type) => {
      options.push(
        <option key={type.id} value={type.id}>
          {type.name}
        </option>,
      );
    });

    return options;
  }, []);

  const onSearchVendor = useCallback(
    (searchValues: string) => {
      // Search từ 2 char trở lên cho đỡ lag
      if (searchValues.length >= 2 && vendors)
        setListVendor(vendors?.filter((vendor) => vendor.name.toLowerCase().includes(searchValues.toLowerCase())));
      else setListVendor([]);
    },
    [vendors],
  );

  const onVendorChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const vendorId = ''; //Bắt buộc phải select từ list search
      setProductDetail((productDetail) => ({ ...productDetail, vendor_id: vendorId }));
      setVendorText(e.target.value);
      setValidate((validate) => ({ ...validate, vendor: validateProductVendor(vendorId) }));
      onSearchVendor(e.target.value);
    },
    [onSearchVendor],
  );

  const onVendorSearchResultClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
    const id = e.currentTarget.getAttribute('data-id')!;
    const name = e.currentTarget.getAttribute('data-name')!;
    setProductDetail((productDetail) => ({ ...productDetail, vendor_id: id }));
    setVendorText(name);
    setValidate((validate) => ({ ...validate, vendor: validateProductVendor(id) }));
    setListVendor([]);
  }, []);

  const onProductTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, name: e.target.value }));
    setValidate((validate) => ({ ...validate, name: validateProductName(e.target.value) }));
  }, []);

  const onBrandChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, brand_id: e.target.value }));
    setValidate((validate) => ({ ...validate, brand_id: validateProductBrand(e.target.value) }));
  }, []);

  const onConditionChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, condition_id: e.target.value }));
    setValidate((validate) => ({ ...validate, condition_id: validateProductCondition(e.target.value) }));
  }, []);

  const onSkuChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, sku: e.target.value }));
  }, []);

  const onImageUpload = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setValidate((validate) => ({ ...validate, images: '' }));
      const newImageFile = e.target.files[0];

      setImageFiles((imageFiles) => [...imageFiles, newImageFile]);
      setProductDetail((productDetail) => ({
        ...productDetail,
        imagesOrder: [...productDetail.imagesOrder, newImageFile.name],
      }));
      const reader = new FileReader();
      reader.readAsDataURL(newImageFile);
      reader.onload = () => {
        setPreviewImages((previewImages) => [...previewImages, reader.result as string]);
      };
    }
  }, []);

  const onRemoveImage = useCallback(
    (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
      //Nếu là tạo mới thì xoá ảnh preview + file
      //Nếu là update thì check ảnh xoá có ở trong detail server trả về, nếu có thì thêm id ảnh vào deletedImage, các bước còn lại như tạo mới sp

      const removeImagePosition: number = +e.currentTarget.getAttribute('data-position')!;

      const removeImageFile = previewImages[removeImagePosition];

      const imageFilesAfterRemove = imageFiles.filter((_, index) => index !== removeImagePosition);
      const previewImagesAfterRemove = previewImages.filter((_, index) => index !== removeImagePosition);
      const imagesOrderAfterRemove = productDetail.imagesOrder.filter((_, index) => index !== removeImagePosition);

      setPreviewImages(previewImagesAfterRemove);
      setImageFiles(imageFilesAfterRemove);

      //Nếu image remove là image đc trả về từ server
      if (productDetailFromServer) {
        const serverRemoveImageIndex = productDetailFromServer.images.findIndex(
          (image) => image.file === removeImageFile,
        );
        if (serverRemoveImageIndex !== -1) {
          setProductDetail((productDetail) => ({
            ...productDetail,
            imagesOrder: imagesOrderAfterRemove,
            deleted_images: [
              ...productDetail.deleted_images,
              +productDetailFromServer.images[serverRemoveImageIndex].id,
            ],
          }));
        } else {
          setProductDetail((productDetail) => ({
            ...productDetail,
            imagesOrder: imagesOrderAfterRemove,
          }));
        }
      }

      setValidate((validate) => ({ ...validate, images: validateProductImages(previewImagesAfterRemove) }));
    },
    [imageFiles, previewImages, productDetailFromServer, productDetail.imagesOrder],
  );

  const onCategoryChange = useCallback((selectedValues: SelectedValuesType) => {
    const selectedValuesToNumbers = selectedValues.map((value) => Number(value));

    setProductDetail((productDetail) => ({ ...productDetail, categories: selectedValuesToNumbers }));
    setValidate((validate) => ({ ...validate, categories: validateProductCategories(selectedValuesToNumbers) }));
  }, []);

  const onDescriptionChange = (values: EditorValue) => {
    //Ref: https://github.com/sstur/react-rte/issues/103
    const plainText = values.getEditorState().getCurrentContent().getPlainText();

    setDescriptionRichTextValue(values);
    setProductDetail({ ...productDetail, description: values.toString('html') });
    setValidate({ ...validate, description: validateProductDescription(plainText) });
  };

  const onEnabledForSaleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, enabled: +e.target.checked }));
  }, []);

  const onMembershipChange = useCallback((selectedValues: SelectedValuesType) => {
    const selectedValuesToNumbers = selectedValues.map((value) => Number(value));

    setProductDetail((productDetail) => ({ ...productDetail, memberships: selectedValuesToNumbers }));
  }, []);

  const onTaxExemptChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, tax_exempt: +e.target.checked }));
  }, []);

  const onPriceChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (priceRegex.test(e.target.value)) {
        setProductDetail((productDetail) => ({ ...productDetail, price: e.target.value }));
        setValidate((validate) => ({
          ...validate,
          price: validateProductPrice(e.target.value),
          sale_price: productDetail.participate_sale
            ? validateProductSalePrice(e.target.value, productDetail.sale_price, productDetail.sale_price_type)
            : '',
        }));
      }
    },
    [productDetail.participate_sale, productDetail.sale_price, productDetail.sale_price_type],
  );

  const onParticipateSaleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({
      ...productDetail,
      participate_sale: +e.target.checked,
      sale_price: '',
    }));
    setValidate((validate) => ({
      ...validate,
      sale_price: '',
    }));
  }, []);

  const onSalePriceTypeChange = useCallback(
    (e: React.ChangeEvent<HTMLSelectElement>) => {
      setProductDetail((productDetail) => ({ ...productDetail, sale_price_type: e.target.value }));
      setValidate((validate) => ({
        ...validate,
        sale_price: validateProductSalePrice(productDetail.price, productDetail.sale_price, e.target.value),
      }));
    },
    [productDetail.price, productDetail.sale_price],
  );

  const onSalePriceChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (priceRegex.test(e.target.value)) {
        setProductDetail((productDetail) => ({ ...productDetail, sale_price: e.target.value }));
        setValidate((validate) => ({
          ...validate,
          sale_price: validateProductSalePrice(productDetail.price, e.target.value, productDetail.sale_price_type),
        }));
      }
    },
    [productDetail.price, productDetail.sale_price_type],
  );

  const onArrivalDateChange = useCallback((date: Date | null) => {
    setStartDate(date);
    setProductDetail((productDetail) => ({
      ...productDetail,
      arrival_date: date ? formatDateToYYYYMMDD(date) : '',
    }));
  }, []);

  const onQuantityChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (priceRegex.test(e.target.value)) {
      setProductDetail((productDetail) => ({ ...productDetail, quantity: e.target.value }));
      setValidate((validate) => ({ ...validate, quantity: validateProductQuantity(e.target.value) }));
    }
  }, []);

  const onShippingToContinentalUSChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (priceRegex.test(e.target.value)) {
      setProductDetail((productDetail) => ({
        ...productDetail,
        shipping_to_zones: productDetail.shipping_to_zones.map((shippingZone) => {
          if (shippingZone.id === PRODUCT_SHIPPING_TO_ZONE_CONTINENTAL_US_ID) {
            return { ...shippingZone, price: e.target.value };
          }
          return shippingZone;
        }),
      }));
      setValidate((validate) => ({
        ...validate,
        shipping_to_zones: validateProductShippingToZonePrice(e.target.value),
      }));
    }
  }, []);

  const onShippingToOtherPlacesChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const shippingZoneId = +e.target.getAttribute('data-id')!;

    if (priceRegex.test(e.target.value)) {
      setProductDetail((productDetail) => ({
        ...productDetail,
        shipping_to_zones: productDetail.shipping_to_zones.map((shippingToZone) => {
          if (shippingToZone.id === shippingZoneId) {
            return {
              ...shippingToZone,
              price: e.target.value,
            };
          }
          return shippingToZone;
        }),
      }));
    }
  }, []);

  const onAddShippingLocation = useCallback(() => {
    if (shippingLocationSelectRef.current) {
      const selectedShippingLocationId = shippingLocationSelectRef.current.value;
      if (selectedShippingLocationId) {
        setProductDetail((productDetail) => ({
          ...productDetail,
          shipping_to_zones: [
            ...productDetail.shipping_to_zones,
            {
              id: +selectedShippingLocationId,
              price: '',
            },
          ],
        }));
      }
    }
  }, []);

  const onRemoveShippingLocation = useCallback((e: React.MouseEvent<HTMLParagraphElement>) => {
    const id = +e.currentTarget.getAttribute('data-shipping-location')!;

    setProductDetail((productDetail) => ({
      ...productDetail,
      shipping_to_zones: productDetail.shipping_to_zones.filter((shippingToZone) => shippingToZone.id != id),
    }));
  }, []);

  const onOpenGraphTagsTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    if (e.target.value === PRODUCT_OPEN_GRAPH_TAGS_TYPE_AUTOGENERATED_ID) {
      setProductDetail((productDetail) => ({
        ...productDetail,
        og_tags_type: e.target.value,
        og_tags: '',
      }));
    } else {
      setProductDetail((productDetail) => ({ ...productDetail, og_tags_type: e.target.value }));
    }
  }, []);

  const onOpenGraphTagsChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, og_tags: e.target.value }));
  }, []);

  const onMetaDescriptionTypeChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    if (e.target.value === PRODUCT_META_DESCRIPTION_TYPE_AUTOGENERATED_ID)
      setProductDetail((productDetail) => ({
        ...productDetail,
        meta_desc_type: e.target.value,
        meta_description: '',
      }));
    else setProductDetail((productDetail) => ({ ...productDetail, meta_desc_type: e.target.value }));
  }, []);

  const onMetaDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, meta_description: e.target.value }));
  }, []);

  const onMetaKeywordsChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, meta_keywords: e.target.value }));
  }, []);

  const onPageTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({ ...productDetail, product_page_title: e.target.value }));
  }, []);

  const onFacebookMarketingChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({
      ...productDetail,
      facebook_marketing_enabled: +e.target.checked,
    }));
  }, []);

  const onGoogleFeedChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setProductDetail((productDetail) => ({
      ...productDetail,
      google_feed_enabled: +e.target.checked,
    }));
  }, []);

  const onSubmit = async () => {
    if (isUpdateProduct) {
      onUpdateProduct({
        images: imageFiles,
        productDetail: {
          ...productDetail,
          id: productDetailFromServer.id,
        },
      });
    } else {
      onCreateProduct({
        images: imageFiles,
        productDetail: productDetail,
      });
    }

    setImageFiles([]);
  };

  return (
    <>
      <div>
        <div className="bg-white w-[30px] h-[30px] rounded-full mb-3">
          <Link to={ROUTES.catalogProducts} className="flex justify-center items-center w-full h-full">
            <KeyboardBackspaceIcon className="text-base fill-color-primary" />
          </Link>
        </div>
        <h1 className="font-medium text-3xl mb-6">
          {productDetailFromServer ? productDetailFromServer.name : 'Add product'}
        </h1>
        <div>
          <div className="mb-7">
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">Vendor *</label>
                  <div className="flex-1 relative">
                    <input className="input-primary w-full" value={vendorText} onChange={onVendorChange} />

                    {!!listVendor.length && (
                      <div className="input-primary absolute z-50 left-0 top-[calc(100%+10px)] w-full max-h-[250px] p-0 overflow-auto">
                        {listVendor.map((vendor) => (
                          <div
                            key={vendor.id}
                            className="hover:bg-color-purple p-3 cursor-pointer"
                            data-id={vendor.id}
                            data-name={vendor.name}
                            onClick={onVendorSearchResultClick}
                          >
                            {vendor.name}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
                {validate.vendor && <p className="text-sm text-red-600">{validate.vendor}</p>}
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">Product Title *</label>
                  <input className="input-primary flex-1" value={productDetail.name} onChange={onProductTitleChange} />
                </div>
                {validate.name && <p className="text-sm text-red-600">{validate.name}</p>}
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">Brand *</label>
                  <select className="input-primary flex-1" value={productDetail.brand_id} onChange={onBrandChange}>
                    {renderBrands()}
                  </select>
                </div>
                {validate.brand_id && <p className="text-sm text-red-600">{validate.brand_id}</p>}
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">Condition *</label>
                  <select
                    className="input-primary flex-1"
                    value={productDetail.condition_id}
                    onChange={onConditionChange}
                  >
                    {renderConditions()}
                  </select>
                </div>
                {validate.condition_id && <p className="text-sm text-red-600">{validate.condition_id}</p>}
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">SKU</label>
                  <input className="input-primary flex-1" value={productDetail.sku} onChange={onSkuChange} />
                </div>
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">Images *</label>

                  <div className="flex flex-1 flex-wrap">
                    {previewImages.length > 0 &&
                      previewImages.map((previewImage, index) => (
                        <div key={index} className="w-[125px] h-[125px] relative mr-4 mb-4">
                          <img className="w-full h-full" src={previewImage} />
                          <div
                            className="absolute right-0 top-0 translate-x-1/2 -translate-y-1/2 cursor-pointer"
                            data-position={index}
                            onClick={onRemoveImage}
                          >
                            <CancelIcon className="" />
                          </div>
                        </div>
                      ))}

                    <label
                      className="w-[125px] h-[125px] border border-dashed border-white flex items-center justify-center cursor-pointer hover:text-color-purple hover:border-color-purple"
                      htmlFor="image"
                    >
                      <CameraAltOutlinedIcon className="text-[50px]" />
                    </label>
                    <input type="file" accept="image/*" className="hidden" id="image" onChange={onImageUpload} />
                  </div>
                </div>
                {validate.images && <p className="text-sm text-red-600">{validate.images}</p>}
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">Category *</label>
                  <MultiSelectCheckboxes
                    list={listCategoryCheckboxes}
                    placeholder="Select category"
                    onSelectedValuesChanged={onCategoryChange}
                  />
                </div>
                {validate.categories && <p className="text-sm text-red-600">{validate.categories}</p>}
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5 mb-2">Description *</label>
                  <RichTextEditor
                    className="input-primary flex-1 max-h-[175px] overflow-auto scrollbar-primary"
                    value={descriptionRichTextValue}
                    onChange={onDescriptionChange}
                  />
                </div>
                {validate.description && <p className="text-sm text-red-600">{validate.description}</p>}
              </div>
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <label className="basis-[200px] whitespace-nowrap mr-5">Available for sale</label>
                  <input
                    type="checkbox"
                    name=""
                    checked={!!productDetail.enabled}
                    value={productDetail.enabled}
                    onChange={onEnabledForSaleChange}
                  />
                </div>
              </div>
            </div>
          </div>

          <div className="mb-7">
            <h2 className="font-medium text-2xl mb-5">Prices & Inventory</h2>
            <div className="flex flex-col max-w-[800px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] mr-5 mb-2">Memberships</p>
                  <MultiSelectCheckboxes
                    list={listMembershipCheckboxes}
                    placeholder="Select membership(s)"
                    onSelectedValuesChanged={onMembershipChange}
                  />
                </div>
              </div>

              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] mr-5">Tax class</p>
                  <p className="mr-5">Default</p>
                  <div>
                    <input
                      className="mr-1"
                      type="checkbox"
                      value={productDetail.tax_exempt}
                      checked={!!productDetail.tax_exempt}
                      onChange={onTaxExemptChange}
                    />
                    Tax Exempt
                  </div>
                </div>
              </div>

              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] mr-5">Price *</p>
                  <input
                    type="text"
                    placeholder="0.00"
                    className="input-primary mr-3 w-[100px]"
                    value={productDetail.price}
                    onChange={onPriceChange}
                  />
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      className="mr-1"
                      value={productDetail.participate_sale}
                      checked={!!productDetail.participate_sale}
                      onChange={onParticipateSaleChange}
                    />
                    <p className="mr-3">Sale</p>
                    {!!productDetail.participate_sale && (
                      <div className="flex">
                        <select
                          className="input-primary"
                          value={productDetail.sale_price_type}
                          onChange={onSalePriceTypeChange}
                        >
                          {renderSalePriceType()}
                        </select>
                        <input
                          type="text"
                          placeholder="0.00"
                          className="input-primary w-[100px]"
                          value={productDetail.sale_price}
                          onChange={onSalePriceChange}
                        />
                      </div>
                    )}
                  </div>
                </div>

                {validate.price && <p className="text-sm text-red-600">{validate.price}</p>}
                {validate.sale_price && <p className="text-sm text-red-600">{validate.sale_price}</p>}
              </div>

              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] mr-5">Arrival Date</p>
                  <DatePicker
                    selected={startDate}
                    onChange={onArrivalDateChange}
                    className="input-primary max-w-[300px]"
                    wrapperClassName="flex-1"
                  />
                </div>
              </div>

              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] mr-5 mb-2">Quantity in stock *</p>
                  <input
                    type="text"
                    className="input-primary flex-1"
                    value={productDetail.quantity}
                    onChange={onQuantityChange}
                  />
                </div>
                {validate.quantity && <p className="text-sm text-red-600">{validate.quantity}</p>}
              </div>
            </div>
          </div>

          <div className="mb-7">
            <h2 className="font-medium text-2xl mb-5">Shipping</h2>
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] mr-5 mb-2">Continental U.S. *</p>
                  <input
                    type="text"
                    className="input-primary flex-1"
                    placeholder="0.00"
                    value={
                      productDetail.shipping_to_zones.find(
                        (zone) => zone.id === PRODUCT_SHIPPING_TO_ZONE_CONTINENTAL_US_ID,
                      )?.price
                    }
                    onChange={onShippingToContinentalUSChange}
                  />
                </div>

                {productDetail.shipping_to_zones.map((shippingToZone, index) => {
                  if (index !== 0) {
                    return (
                      <div key={shippingToZone.id} className="flex flex-wrap items-center mb-2">
                        <p className="basis-[200px] mr-5 mb-2">
                          {shippings?.find((shipping) => shipping.id === `${shippingToZone.id}`)?.name}
                        </p>
                        <input
                          type="text"
                          placeholder="0.00"
                          className="input-primary flex-1 mr-3"
                          data-id={shippingToZone.id}
                          value={shippingToZone.price}
                          onChange={onShippingToOtherPlacesChange}
                        />
                        <p
                          className="flex-1 cursor-pointer"
                          data-shipping-location={shippingToZone.id}
                          onClick={onRemoveShippingLocation}
                        >
                          Remove
                        </p>
                      </div>
                    );
                  }
                })}
                {validate.shipping_to_zones && <p className="text-sm text-red-600">{validate.shipping_to_zones}</p>}
              </div>
            </div>
            <div className="flex flex-col max-w-[800px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] mr-5"></p>
                  <div className="flex-1 flex items-center">
                    <select className="input-primary flex-1 mr-4" ref={shippingLocationSelectRef}>
                      {renderShippings()}
                    </select>
                    <p className="flex-1 cursor-pointer" onClick={onAddShippingLocation}>
                      Add Shipping Location
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div>
            <h2 className="font-medium text-2xl mb-5">Marketing</h2>
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-start mb-2">
                  <p className="basis-[200px] pt-2 mr-5">Open Graph meta tags</p>
                  <div className="flex-1">
                    <select
                      className="input-primary w-full mb-2"
                      value={productDetail.og_tags_type}
                      onChange={onOpenGraphTagsTypeChange}
                    >
                      {renderOpenGraphTagsType()}
                    </select>
                    {productDetail.og_tags_type === PRODUCT_OPEN_GRAPH_TAGS_TYPE_CUSTOM_ID && (
                      <textarea
                        className="input-primary w-full h-[100px] scrollbar-primary"
                        value={productDetail.og_tags}
                        onChange={onOpenGraphTagsChange}
                      ></textarea>
                    )}
                  </div>
                </div>
              </div>
            </div>
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-start mb-2">
                  <p className="basis-[200px] pt-2 mr-5">Meta description</p>
                  <div className="flex-1">
                    <select
                      className="input-primary w-full mb-2"
                      value={productDetail.meta_desc_type}
                      onChange={onMetaDescriptionTypeChange}
                    >
                      {renderMetaDescriptionType()}
                    </select>
                    {productDetail.meta_desc_type === PRODUCT_META_DESCRIPTION_TYPE_CUSTOM_ID && (
                      <textarea
                        className="input-primary w-full h-[100px] scrollbar-primary"
                        value={productDetail.meta_description}
                        onChange={onMetaDescriptionChange}
                      ></textarea>
                    )}
                  </div>
                </div>
              </div>
            </div>
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-start mb-2">
                  <p className="basis-[200px] pt-2 mr-5">Meta keywords</p>
                  <input
                    className="input-primary flex-1"
                    value={productDetail.meta_keywords}
                    onChange={onMetaKeywordsChange}
                  />
                </div>
              </div>
            </div>
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-start mb-2">
                  <p className="basis-[200px] pt-2 mr-5">Product page title</p>
                  <div className="flex-1">
                    <input
                      className="input-primary w-full"
                      value={productDetail.product_page_title}
                      onChange={onPageTitleChange}
                    />
                    <p className="text-xs text-gray-400">Leave blank to use product name as Page Title.</p>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] pt-2 mr-5">Add to Facebook product feed</p>
                  <input
                    type="checkbox"
                    value={productDetail.facebook_marketing_enabled}
                    checked={!!productDetail.facebook_marketing_enabled}
                    onChange={onFacebookMarketingChange}
                  />
                </div>
              </div>
            </div>
            <div className="flex flex-col max-w-[600px] pl-[5%] [&>div]:mb-6">
              <div>
                <div className="flex flex-wrap items-center mb-2">
                  <p className="basis-[200px] pt-2 mr-5">Add to Google product feed</p>
                  <input
                    type="checkbox"
                    value={productDetail.google_feed_enabled}
                    checked={!!productDetail.google_feed_enabled}
                    onChange={onGoogleFeedChange}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-color-primary sticky z-50 bottom-0 p-3 border border-color-border shadow-primary shadow-color-purple">
        <button
          className={`button-primary mr-3 ${isValidCreateProduct ? 'bg-color-orange' : 'bg-color-orange-dark'}`}
          disabled={!isValidCreateProduct}
          onClick={onSubmit}
        >
          {productDetailFromServer ? 'Update Product' : 'Add Product'}
        </button>
        {productDetailFromServer && (
          <a
            className="underline text-color-blue"
            target="_blank"
            rel="noopener noreferrer"
            href={productDetailFromServer.cleanURL}
          >
            {productDetailFromServer.cleanURL}
          </a>
        )}
      </div>
    </>
  );
};

export default ProductDetail;
